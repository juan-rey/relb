# Installation Guide

Prebuilt binaries for Windows and packages for several Linux distributions are available on the RELB Releases page:
https://github.com/juan-rey/relb/releases

RELB is statically linked to a slightly patched version of Hovik Melikyan's C++ Portable Types Library (ptypes).

## Expected source layout
Place both projects side by side using the following directory structure:
```
<parent>/
  ptypes/
  relb/
```

## Prerequisites
- A C++ toolchain with C++14 support
- Windows: Visual Studio (Desktop development with C++ workload) and the Windows SDK
- Linux: gcc/g++ or clang, make, pkg-config (optional), and GNU Autotools components (autoconf, automake, libtool), plus coreutils

# Building on Windows (Visual Studio)
1. Obtain the sources for both projects and place them as described above (`ptypes` and `relb` as siblings).
2. Open `relb/relb.sln` in Visual Studio.
3. Select the desired configuration (e.g., `Release | Win32`).
4. Build the solution (Build > Build Solution). This produces `relb.exe`.

### Notes
- The Visual Studio solution is configured to use the `ptypes` sources from the sibling `ptypes` directory.
- If the IDE cannot find headers or sources in `ptypes`, verify the directory layout and that `ptypes` exists at `..\\ptypes` relative to the `relb` project.

# Building on Linux (Autotools)
1. Build `ptypes` first:
   ```
   cd ptypes
   make
   ```

2. Generate the build system files for `relb` (choose one):
   - Recommended single command:
     ```
     cd ../relb
     autoreconf -fi
     ```
   - Manual sequence (equivalent):
     ```
     aclocal
     autoconf
     autoheader
     automake --add-missing
     ```

3. Configure for your system:
   ```
   ./configure
   ```
   Common examples:
   - `./configure --prefix=/usr/local`
   - `./configure --enable-debug`
   - Run `./configure --help` to list all options.

4. Compile the source code:
   ```
   make
   ```
   Optional (parallel build):
   ```
   make -j$(nproc)
   ```

5. (Optional) Install the binaries (may require root privileges):
   ```
   make install
   ```

## Additional commands
- Uninstall: `make uninstall`
- Remove build outputs: `make clean`
- Remove build outputs and configuration results: `make distclean`

## Troubleshooting
- If you see "aclocal: command not found" (or similar), install the GNU Autotools packages (autoconf, automake, libtool) from your distribution.
- If `configure` fails due to a missing compiler, install a C/C++ toolchain (e.g., `build-essential` on Debian/Ubuntu or `base-devel` on Arch).
- Ensure the `ptypes` and `relb` directories are siblings so relative includes and build scripts can locate `ptypes`.

## Configuration and usage
- A sample configuration file is provided at `relb.conf.sample`.
- See `README.md` for more information about configuration and usage.